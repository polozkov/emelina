G.CONST.SYMBOL_ENTER = `
`;

G.CONST.arr_14_as_7_2 = [[0, "min_fold"], [0, "max_fold"], [1, "min_fold"], [1, "max_fold"],  [2, "min_fold"], [2, "max_fold"],
[3, "min_fold"], [3, "max_fold"], [4, "min_fold"], [4, "max_fold"], [5, "min_fold"], [5, "max_fold"], [6, "min_fold"], [6, "max_fold"]];

//+90, +180, -90, -180
G.CONST.DEG_P1_P2_M1_M2 = [1, 2, 3, 2];

//косинусы углов 0,90,180 и 270
G.CONST.arr_cos = [1, 0, -1, 0];
//синусы углов 0,90,180 и 270
G.CONST.arr_sin = [0, 1, 0, -1];

//для срезания кромки у треугольника 45 45 90 (нужен угол 22.5 градуса)
G.CONST.tan_22_5 = Math.tan(Math.PI / 8.0);
G.CONST.sin_22_5 = Math.sin(Math.PI / 8.0);
G.CONST.cos_22_5 = Math.cos(Math.PI / 8.0);
G.CONST.sqrt2 = Math.sqrt(2);

//убери (на последнюю позицию) одну из букв-обозначение оси
G.CONST.arr_char_x = ["y", "z", "x"];
G.CONST.arr_char_y = ["z", "x", "y"];
G.CONST.arr_char_z = ["x", "y", "z"];
G.CONST.arr_char_my_012 = [G.CONST.arr_char_x, G.CONST.arr_char_y, G.CONST.arr_char_z];
//000 001 010 011  100 101 110 111 - кроме 000 и 111 какой-то из трёх битов уникальный (отличается)
G.CONST.arr_unique_bit = [null, 0, 1, 2, 2, 1, 0, null];
//000 001 010 011  100 101 110 111 - кроме 000 и 111 какой-то из трёх битов уникальный (отличается)
G.CONST.arr_unique_letter = [null, "x", "y", "z", "z", "y", "x", null];

//напрвления по 6 осям (по трём направления в обе стороны)
G.CONST.arr_6_directions = [[1,0,0], [0,1,0], [0,0,1], [0,0,-1], [0,-1,0], [-1,0,0]];
//вдиагональном соединении: одна из петель находятся в этом направлении ("0" - справа). Если нет, то в направлении "1"
G.CONST.arr_dir_best_for_diagonal_connections = [0,1,2];

//Right, Back, Up,   Down, Front, Left
G.CONST.obj_dir_indexes = {"X":0, "Y":1, "Z":2, "z":3, "y":4, "x":5};

//x+, y+, z+, z-, y-, x-
G.CONST.arr_6_faces_delta_with_one_zero = [
    [[0,1,1],[0,1,-1],[0,-1,-1],[0,-1,1]],
    [[1,0,1],[-1,0,1],[-1,0,-1],[1,0,-1]],
    [[1,1,0],[1,-1,0],[-1,-1,0],[-1,1,0]],

    [[-1,-1,0],[-1,1,0],[1,1,0],[1,-1,0]],
    [[-1,0,-1],[1,0,-1],[1,0,1],[-1,0,1]],
    [[0,-1,-1],[0,-1,1],[0,1,1],[0,1,-1]]
];
//x+, y+, z+, z-, y-, x-
G.CONST.arr_6_faces = [
    [[1,1,1],[1,1,-1],[1,-1,-1],[1,-1,1]],
    [[1,1,1],[-1,1,1],[-1,1,-1],[1,1,-1]],
    [[1,1,1],[1,-1,1],[-1,-1,1],[-1,1,1]],

    [[-1,-1,-1],[-1,1,-1],[1,1,-1],[1,-1,-1]],
    [[-1,-1,-1],[1,-1,-1],[1,-1,1],[-1,-1,1]],
    [[-1,-1,-1],[-1,-1,1],[-1,1,1],[-1,1,-1]]
];

//конвертер строк с нумерацией от 1 до 8 -- в нумерация от 0 до 7 и обратно
G.CONST.f_18_to_07 = (str => str.replace(/[1-8]/g, match => String(Number(match) - 1)));
G.CONST.f_07_to_18 = (str => str.replace(/[1-8]/g, match => String(Number(match) + 1)));

//когда кубики расположены в виде прямоугольника 4 на 2 - их центры имеют такие координаты
G.CONST.arr_cubes_centers = [[0,0,0], [2,0,0], [4,0,0], [6,0,0], [0,2,0], [2,2,0], [4,2,0], [6,2,0]];

G.CONST.string_for_task_start = G.CONST.f_18_to_07("1Z5 2Z3 3Z7 3-8 4X8 5y6 6y7");
G.CONST.string_for_task_start = G.CONST.f_18_to_07("1Z2 2Z3 3-6 6Z7 7Z8 4-7 1X5");
G.CONST.string_for_task_start = G.CONST.f_18_to_07("1Z2 2Z3 3-6 6Z7 7Z8 4-7 5Z6");
//Деревянная версия КОЖЗ ГСФ8
//G.CONST.string_for_task_start = G.CONST.f_18_to_07("1Z2 2Z3 3-6 6Z7 7Z8 4-7 1x5");

//Плутон (рыжая и одноцветная) 3д печать
G.CONST.string_for_task_start = G.CONST.f_18_to_07("1Z5 2Z3 3-8 4X8 3Z7 5y6 6y7");

G.CONST.index_of_static_cube = 2;


//настройки цветов
G.CONST.RGB = {};

//семь цветов радуги для петель (петля состоит из двух полупетель)
G.CONST.RGB.arr_7_folds = ["#F00", "#F90", "#FF0", "#0A0", "#BBF", "#009", "#808"];
//интересует только первая буква КаждыйОхотникЖелаетЗнатьГдеСидитФазан
G.CONST.RGB.arr_7_folds_names = ["Кра","Ора","Жёл","Зел","Гол","Син","Фио"].map(s => s.toLowerCase()[0]);

//восемь цветов для восьми кубов -- за основу взяты 7 цветов радуги + Деревянный (коричневый) цвет
G.CONST.RGB.arr_8_cubes = [...G.CONST.RGB.arr_7_folds , "#530"];
//интересует лишь первые буквы названй цветов: КОЖЗГСФ + Д (к цветам радуги добавь Деревянный цвет)
G.CONST.RGB.arr_8_cubes_names = [...G.CONST.RGB.arr_7_folds_names,"Дер"].map((s,i) => ((i+1) + s.toUpperCase()[0]));

//выбранные (активные) кубики подсвечивай определённым цветом (а статичные кубики - другим цветом)
G.CONST.RGB.arr_not_selected_and_selected = ["#FFF", "#999"];

//обводка для нечётных полупетель (которые соединяются не с "а"-кубиком, а "б"-кубиком, где max_fold)
G.CONST.RGB.default_fold_stroke_odd_indexes = "#000";
//стиль для прорисовки линий сетки (ходы располагать по сетке)
G.CONST.RGB.grid_fill_stroke_line_width = ["none", "#000", 0.4];


//внешний вид (за исключением цветов_)
G.CONST.VIEW = {};
//насколько большие кубики (1.0 - без зазоров, 0.5 - кубики в два раза меньше, чем без зазоров)
G.CONST.VIEW.ratio_for_cube_side = 0.8;

//толщина линий для петель (сторона кубика = 2)
G.CONST.VIEW.default_stroke_fold_width = 0.05;
//толщина линий для рёбер (квадратных граней как полигонов) кубика (сторона кубика = 2)
G.CONST.VIEW.default_stroke_cube_width = 0.1;

//как повёрнуты кубики - на столько градусов последовательно на осях x,y,z 
G.CONST.DEG_ROTATE_X_Y_Z = [-12,-12,0];

//сколько ходов показывать по горизонтали
G.CONST.GRID_SHOW_HALF_NX = 2;
//сколько строк (по вертикали)
G.CONST.GRID_SHOW_NY = 5;

//число слотов по горизонтали вдвое больше числа ходов
G.CONST.GRID_SHOW_NX = G.CONST.GRID_SHOW_HALF_NX * 2;